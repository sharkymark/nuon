#:schema https://api.nuon.co/v1/general/config-schema?source=action

# This action checks the Coder deployment's health and status after deployment.
# They are run after the Coder component is deployed, and can be triggered manually.

name    = "check_coder_deployment"
timeout = "2m"

[[triggers]]
type           = "post-deploy-component"
component_name = "coder"

[[triggers]]
type = "manual"

[[steps]]
name    = "Check Coder pod status"
inline_contents = """
#!/usr/bin/env sh
kubectl get pods -n coder
"""

[[steps]]
name    = "Check Coder service external endpoint"
inline_contents = """
#!/usr/bin/env sh
kubectl get svc -n coder
"""

[[steps]]
name    = "Check ALB health (if available)"
inline_contents = """

#!/usr/bin/env sh

# Nuon will interpolate this variable directly into the script before execution
NUON_CODER_ACCESS_URL="https://{{.nuon.inputs.inputs.sub_domain}}.{{.nuon.install.sandbox.outputs.nuon_dns.public_domain.name}}"

if [ -z "$NUON_CODER_ACCESS_URL" ]; then
  echo "Error: Coder external access URL is empty after Nuon interpolation."
  exit 1
fi

# The health check path for ALB and external monitoring, as per Coder's design
HEALTH_CHECK_URL="${NUON_CODER_ACCESS_URL}/livez"

echo "Checking Coder health at: $HEALTH_CHECK_URL"

# Use curl to get the HTTP status code.
# -s : Silent output
# -o /dev/null : Discard the response body
# -w "%{http_code}" : Print only the HTTP status code to stdout
# --max-time 15 : Set a generous timeout for the entire operation
# --fail-early : Exit immediately on the first transfer error
# --retry 5 --retry-delay 5 : Retry up to 5 times, with 5 seconds between retries
HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 15 --fail-early --retry 5 --retry-delay 5 "$HEALTH_CHECK_URL")

# Check if the HTTP code is 200 (OK) or 307 (Temporary Redirect).
# You might remove '307' if you've disabled the internal Coder redirect.
# For a robust external check, accepting both 200 and 307 (if present) is reasonable.
if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 307 ]; then
  echo "Coder external health check passed! Status code: $HTTP_CODE"
  exit 0
else
  echo "Coder external health check failed! Status code: $HTTP_CODE"
  exit 1
fi
"""

[[steps]]
name    = "Check Postgres logs"
inline_contents = """

# Define the namespace and app label
NAMESPACE="coder"
APP_LABEL="app.kubernetes.io/name=postgresql"
INITIAL_LOG_COUNT=40 # Number of initial log lines to show
LAST_LOG_COUNT=10    # Number of last log lines to show

# --- Find the PostgreSQL pod name ---
POSTGRES_POD_NAME=$(kubectl get pods -n "$NAMESPACE" --selector "$APP_LABEL" -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)

if [ -z "$POSTGRES_POD_NAME" ]; then
  echo "Error: No PostgreSQL pod found in namespace '$NAMESPACE' with label '$APP_LABEL'."
  exit 1
fi
echo "Found PostgreSQL pod: $POSTGRES_POD_NAME"

# --- Get the exact start time of the pod in RFC3339 format ---
POD_START_TIME_RFC3339=$(kubectl get pod "$POSTGRES_POD_NAME" -n "$NAMESPACE" -o jsonpath='{.status.startTime}' 2>/dev/null)

if [ -z "$POD_START_TIME_RFC3339" ]; then
  echo "Error: Could not determine start time for pod '$POSTGRES_POD_NAME'."
  exit 1
fi
echo "Pod started at: $POD_START_TIME_RFC3339"

# --- Get INITIAL logs ---
echo -e "\n--- First $INITIAL_LOG_COUNT lines of logs for $POSTGRES_POD_NAME (from startup) ---"
# Since --until-time is not supported, we fetch logs from start time
# and then pipe to head to get the *first* N lines.
# This assumes the initial startup logs appear chronologically at the beginning of the --since-time stream.
kubectl logs "$POSTGRES_POD_NAME" -n "$NAMESPACE" \
  --timestamps \
  --since-time="$POD_START_TIME_RFC3339" \
  | head -n "$INITIAL_LOG_COUNT"

# --- Get LAST logs ---
echo -e "\n--- Last $LAST_LOG_COUNT lines of current logs for $POSTGRES_POD_NAME ---"
# This remains correct as --tail works as expected.
kubectl logs "$POSTGRES_POD_NAME" -n "$NAMESPACE" --timestamps --tail="$LAST_LOG_COUNT"

echo -e "\n--- End of log output ---"


"""

[[steps]]
name    = "Check Coder deployment replicas"
inline_contents = """
#!/usr/bin/env sh
kubectl get deployment -n coder -l app.kubernetes.io/name=coder
"""

[[steps]]
name    = "Check Coder pods, services, deployments and replicasets"
inline_contents = """
#!/usr/bin/env sh
kubectl get all -n coder -l app.kubernetes.io/name=coder
"""
